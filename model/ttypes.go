// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package model

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

type UserType int64

const (
	UserType_ADMIN       UserType = 0
	UserType_PARENT      UserType = 1
	UserType_FACILITATOR UserType = 2
)

func (p UserType) String() string {
	switch p {
	case UserType_ADMIN:
		return "UserType_ADMIN"
	case UserType_PARENT:
		return "UserType_PARENT"
	case UserType_FACILITATOR:
		return "UserType_FACILITATOR"
	}
	return "<UNSET>"
}

func UserTypeFromString(s string) (UserType, error) {
	switch s {
	case "UserType_ADMIN":
		return UserType_ADMIN, nil
	case "UserType_PARENT":
		return UserType_PARENT, nil
	case "UserType_FACILITATOR":
		return UserType_FACILITATOR, nil
	}
	return UserType(math.MinInt32 - 1), fmt.Errorf("not a valid UserType string")
}

type CellPlatform int64

const (
	CellPlatform_ANDROID CellPlatform = 0
	CellPlatform_IOS     CellPlatform = 1
	CellPlatform_OTHER   CellPlatform = 2
)

func (p CellPlatform) String() string {
	switch p {
	case CellPlatform_ANDROID:
		return "CellPlatform_ANDROID"
	case CellPlatform_IOS:
		return "CellPlatform_IOS"
	case CellPlatform_OTHER:
		return "CellPlatform_OTHER"
	}
	return "<UNSET>"
}

func CellPlatformFromString(s string) (CellPlatform, error) {
	switch s {
	case "CellPlatform_ANDROID":
		return CellPlatform_ANDROID, nil
	case "CellPlatform_IOS":
		return CellPlatform_IOS, nil
	case "CellPlatform_OTHER":
		return CellPlatform_OTHER, nil
	}
	return CellPlatform(math.MinInt32 - 1), fmt.Errorf("not a valid CellPlatform string")
}

type ContactPreference int64

const (
	ContactPreference_EMAIL              ContactPreference = 0
	ContactPreference_PHONE_TEXT         ContactPreference = 1
	ContactPreference_PHONE_NOTIFICATION ContactPreference = 2
)

func (p ContactPreference) String() string {
	switch p {
	case ContactPreference_EMAIL:
		return "ContactPreference_EMAIL"
	case ContactPreference_PHONE_TEXT:
		return "ContactPreference_PHONE_TEXT"
	case ContactPreference_PHONE_NOTIFICATION:
		return "ContactPreference_PHONE_NOTIFICATION"
	}
	return "<UNSET>"
}

func ContactPreferenceFromString(s string) (ContactPreference, error) {
	switch s {
	case "ContactPreference_EMAIL":
		return ContactPreference_EMAIL, nil
	case "ContactPreference_PHONE_TEXT":
		return ContactPreference_PHONE_TEXT, nil
	case "ContactPreference_PHONE_NOTIFICATION":
		return ContactPreference_PHONE_NOTIFICATION, nil
	}
	return ContactPreference(math.MinInt32 - 1), fmt.Errorf("not a valid ContactPreference string")
}

type Date struct {
	Year  int16 `thrift:"year,1,required"`
	Month int16 `thrift:"month,2,required"`
	Day   int16 `thrift:"day,3,required"`
}

func NewDate() *Date {
	return &Date{}
}

func (p *Date) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Date) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Year = v
	}
	return nil
}

func (p *Date) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Month = v
	}
	return nil
}

func (p *Date) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Day = v
	}
	return nil
}

func (p *Date) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Date"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Date) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("year", thrift.I16, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:year: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.Year)); err != nil {
		return fmt.Errorf("%T.year (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:year: %s", p, err)
	}
	return err
}

func (p *Date) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("month", thrift.I16, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:month: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.Month)); err != nil {
		return fmt.Errorf("%T.month (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:month: %s", p, err)
	}
	return err
}

func (p *Date) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("day", thrift.I16, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:day: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.Day)); err != nil {
		return fmt.Errorf("%T.day (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:day: %s", p, err)
	}
	return err
}

func (p *Date) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Date(%+v)", *p)
}

type User struct {
	UserId       int64  `thrift:"user_id,1,required"`
	UserName     string `thrift:"user_name,2,required"`
	EmailAddress string `thrift:"email_address,3,required"`
	FirstName    string `thrift:"first_name,4,required"`
	LastName     string `thrift:"last_name,5,required"`
	BirthDate    *Date  `thrift:"birth_date,6"`
	CreationDate *Date  `thrift:"creation_date,7"`
	Photo        []byte `thrift:"photo,8"`
	PwdHash      string `thrift:"pwd_hash,9"`
}

func NewUser() *User {
	return &User{}
}

func (p *User) IsSetBirthDate() bool {
	return p.BirthDate != nil
}

func (p *User) IsSetCreationDate() bool {
	return p.CreationDate != nil
}

func (p *User) IsSetPhoto() bool {
	return p.Photo != nil
}

func (p *User) IsSetPwdHash() bool {
	return p.PwdHash != ""
}

func (p *User) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *User) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.UserId = v
	}
	return nil
}

func (p *User) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.UserName = v
	}
	return nil
}

func (p *User) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.EmailAddress = v
	}
	return nil
}

func (p *User) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.FirstName = v
	}
	return nil
}

func (p *User) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.LastName = v
	}
	return nil
}

func (p *User) readField6(iprot thrift.TProtocol) error {
	p.BirthDate = NewDate()
	if err := p.BirthDate.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BirthDate)
	}
	return nil
}

func (p *User) readField7(iprot thrift.TProtocol) error {
	p.CreationDate = NewDate()
	if err := p.CreationDate.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CreationDate)
	}
	return nil
}

func (p *User) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.Photo = v
	}
	return nil
}

func (p *User) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.PwdHash = v
	}
	return nil
}

func (p *User) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("User"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *User) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:user_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:user_id: %s", p, err)
	}
	return err
}

func (p *User) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:user_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.user_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:user_name: %s", p, err)
	}
	return err
}

func (p *User) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("email_address", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:email_address: %s", p, err)
	}
	if err := oprot.WriteString(string(p.EmailAddress)); err != nil {
		return fmt.Errorf("%T.email_address (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:email_address: %s", p, err)
	}
	return err
}

func (p *User) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("first_name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:first_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FirstName)); err != nil {
		return fmt.Errorf("%T.first_name (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:first_name: %s", p, err)
	}
	return err
}

func (p *User) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("last_name", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:last_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.LastName)); err != nil {
		return fmt.Errorf("%T.last_name (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:last_name: %s", p, err)
	}
	return err
}

func (p *User) writeField6(oprot thrift.TProtocol) (err error) {
	if p.BirthDate != nil {
		if p.IsSetBirthDate() {
			if err := oprot.WriteFieldBegin("birth_date", thrift.STRUCT, 6); err != nil {
				return fmt.Errorf("%T write field begin error 6:birth_date: %s", p, err)
			}
			if err := p.BirthDate.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.BirthDate)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 6:birth_date: %s", p, err)
			}
		}
	}
	return err
}

func (p *User) writeField7(oprot thrift.TProtocol) (err error) {
	if p.CreationDate != nil {
		if p.IsSetCreationDate() {
			if err := oprot.WriteFieldBegin("creation_date", thrift.STRUCT, 7); err != nil {
				return fmt.Errorf("%T write field begin error 7:creation_date: %s", p, err)
			}
			if err := p.CreationDate.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.CreationDate)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 7:creation_date: %s", p, err)
			}
		}
	}
	return err
}

func (p *User) writeField8(oprot thrift.TProtocol) (err error) {
	if p.Photo != nil {
		if p.IsSetPhoto() {
			if err := oprot.WriteFieldBegin("photo", thrift.BINARY, 8); err != nil {
				return fmt.Errorf("%T write field begin error 8:photo: %s", p, err)
			}
			if err := oprot.WriteBinary(p.Photo); err != nil {
				return fmt.Errorf("%T.photo (8) field write error: %s", p)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 8:photo: %s", p, err)
			}
		}
	}
	return err
}

func (p *User) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetPwdHash() {
		if err := oprot.WriteFieldBegin("pwd_hash", thrift.STRING, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:pwd_hash: %s", p, err)
		}
		if err := oprot.WriteString(string(p.PwdHash)); err != nil {
			return fmt.Errorf("%T.pwd_hash (9) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:pwd_hash: %s", p, err)
		}
	}
	return err
}

func (p *User) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User(%+v)", *p)
}

type Family struct {
	FamilyId       int64          `thrift:"family_id,1,required"`
	Administrators map[*User]bool `thrift:"administrators,2,required"`
	Name           string         `thrift:"name,3,required"`
	CreationDate   *Date          `thrift:"creation_date,4,required"`
}

func NewFamily() *Family {
	return &Family{}
}

func (p *Family) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Family) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.FamilyId = v
	}
	return nil
}

func (p *Family) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set being: %s")
	}
	p.Administrators = make(map[*User]bool, size)
	for i := 0; i < size; i++ {
		_elem0 := NewUser()
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0)
		}
		p.Administrators[_elem0] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s")
	}
	return nil
}

func (p *Family) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *Family) readField4(iprot thrift.TProtocol) error {
	p.CreationDate = NewDate()
	if err := p.CreationDate.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CreationDate)
	}
	return nil
}

func (p *Family) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Family"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Family) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("family_id", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:family_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.FamilyId)); err != nil {
		return fmt.Errorf("%T.family_id (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:family_id: %s", p, err)
	}
	return err
}

func (p *Family) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Administrators != nil {
		if err := oprot.WriteFieldBegin("administrators", thrift.SET, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:administrators: %s", p, err)
		}
		if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Administrators)); err != nil {
			return fmt.Errorf("error writing set begin: %s")
		}
		for v, _ := range p.Administrators {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return fmt.Errorf("error writing set end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:administrators: %s", p, err)
		}
	}
	return err
}

func (p *Family) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:name: %s", p, err)
	}
	return err
}

func (p *Family) writeField4(oprot thrift.TProtocol) (err error) {
	if p.CreationDate != nil {
		if err := oprot.WriteFieldBegin("creation_date", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:creation_date: %s", p, err)
		}
		if err := p.CreationDate.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CreationDate)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:creation_date: %s", p, err)
		}
	}
	return err
}

func (p *Family) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Family(%+v)", *p)
}

type Child struct {
	ChildId          int64  `thrift:"child_id,1,required"`
	FirstName        string `thrift:"first_name,2,required"`
	BirthDate        *Date  `thrift:"birth_date,3,required"`
	ProgramStartDate *Date  `thrift:"program_start_date,4,required"`
	Photo            []byte `thrift:"photo,5"`
}

func NewChild() *Child {
	return &Child{}
}

func (p *Child) IsSetPhoto() bool {
	return p.Photo != nil
}

func (p *Child) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Child) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ChildId = v
	}
	return nil
}

func (p *Child) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.FirstName = v
	}
	return nil
}

func (p *Child) readField3(iprot thrift.TProtocol) error {
	p.BirthDate = NewDate()
	if err := p.BirthDate.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BirthDate)
	}
	return nil
}

func (p *Child) readField4(iprot thrift.TProtocol) error {
	p.ProgramStartDate = NewDate()
	if err := p.ProgramStartDate.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ProgramStartDate)
	}
	return nil
}

func (p *Child) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Photo = v
	}
	return nil
}

func (p *Child) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Child"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Child) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("child_id", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:child_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ChildId)); err != nil {
		return fmt.Errorf("%T.child_id (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:child_id: %s", p, err)
	}
	return err
}

func (p *Child) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("first_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:first_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FirstName)); err != nil {
		return fmt.Errorf("%T.first_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:first_name: %s", p, err)
	}
	return err
}

func (p *Child) writeField3(oprot thrift.TProtocol) (err error) {
	if p.BirthDate != nil {
		if err := oprot.WriteFieldBegin("birth_date", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:birth_date: %s", p, err)
		}
		if err := p.BirthDate.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.BirthDate)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:birth_date: %s", p, err)
		}
	}
	return err
}

func (p *Child) writeField4(oprot thrift.TProtocol) (err error) {
	if p.ProgramStartDate != nil {
		if err := oprot.WriteFieldBegin("program_start_date", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:program_start_date: %s", p, err)
		}
		if err := p.ProgramStartDate.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ProgramStartDate)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:program_start_date: %s", p, err)
		}
	}
	return err
}

func (p *Child) writeField5(oprot thrift.TProtocol) (err error) {
	if p.Photo != nil {
		if p.IsSetPhoto() {
			if err := oprot.WriteFieldBegin("photo", thrift.BINARY, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:photo: %s", p, err)
			}
			if err := oprot.WriteBinary(p.Photo); err != nil {
				return fmt.Errorf("%T.photo (5) field write error: %s", p)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:photo: %s", p, err)
			}
		}
	}
	return err
}

func (p *Child) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Child(%+v)", *p)
}
