// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package model

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

type Example struct {
	Number    int32   `thrift:"number,1"`
	BigNumber int64   `thrift:"bigNumber,2"`
	Decimals  float64 `thrift:"decimals,3"`
	Name      string  `thrift:"name,4"`
}

func NewExample() *Example {
	return &Example{
		Number: 10,

		Name: "thrifty",
	}
}

func (p *Example) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Example) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Number = v
	}
	return nil
}

func (p *Example) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.BigNumber = v
	}
	return nil
}

func (p *Example) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Decimals = v
	}
	return nil
}

func (p *Example) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *Example) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Example"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Example) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("number", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:number: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Number)); err != nil {
		return fmt.Errorf("%T.number (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:number: %s", p, err)
	}
	return err
}

func (p *Example) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bigNumber", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:bigNumber: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.BigNumber)); err != nil {
		return fmt.Errorf("%T.bigNumber (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:bigNumber: %s", p, err)
	}
	return err
}

func (p *Example) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("decimals", thrift.DOUBLE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:decimals: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Decimals)); err != nil {
		return fmt.Errorf("%T.decimals (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:decimals: %s", p, err)
	}
	return err
}

func (p *Example) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:name: %s", p, err)
	}
	return err
}

func (p *Example) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Example(%+v)", *p)
}
